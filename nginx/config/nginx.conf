########################################
# Nginx Full Example Configuration
# 本配置是经过任霏优化后的，最佳实践配置参数
# 服务器需要修改内核参数最大文件打开数为 65535
#
# 此参数配置经过任霏实践，目前在 1核1G 的机器
# 上长期稳定支持了2000+的并发数（非HTTPS）
# 并发数：netstat -apn |grep nginx |wc -l
########################################
user                 www www;
# 工作进程数，一般1就够，几个CPU就设置几个
worker_processes     auto;
# 错误日志
error_log            logs/error.log;
# 记录进程 PID 的文件
pid                  logs/nginx.pid;
# 指定进程可以打开的最多文件描述数目,理论值应该是最多打开文件数(ulimit -n )与nginx进程数相除
worker_rlimit_nofile 65535;

events {
    # 启用多路复用IO
    use epoll;
    # 每个 worker 进程所能建立连接的最大值
    worker_connections 65535;
    # 让nginx worker进程尽可能多地接受请求。默认是没有开启的
    # 它的作用是让worker进程一次性地接受监听队列里的所有请求，然后处理。
    # 如果web服务器面对的是一个持续的请求流，那么启用multi_accept可能会造成worker进程一次接受的请求大于worker_connections指定可以接受的请求数。
    # 这就是overflow，这个overflow会造成性能损失，overflow这部分的请求不会受到处理。
    multi_accept on;
}

http {
    # 响应类型
    types {
        text/html                             html htm shtml;
        text/css                              css;
        text/xml                              xml rss;
        image/gif                             gif;
        image/jpeg                            jpeg jpg;
        application/x-javascript              js;
        text/plain                            txt;
        text/x-component                      htc;
        text/mathml                           mml;
        image/png                             png;
        image/x-icon                          ico;
        image/x-jng                           jng;
        image/vnd.wap.wbmp                    wbmp;
        application/java-archive              jar war ear;
        application/mac-binhex40              hqx;
        application/pdf                       pdf;
        application/x-cocoa                   cco;
        application/x-java-archive-diff       jardiff;
        application/x-java-jnlp-file          jnlp;
        application/x-makeself                run;
        application/x-perl                    pl pm;
        application/x-pilot                   prc pdb;
        application/x-rar-compressed          rar;
        application/x-redhat-package-manager  rpm;
        application/x-sea                     sea;
        application/x-shockwave-flash         swf;
        application/x-stuffit                 sit;
        application/x-tcl                     tcl tk;
        application/x-x509-ca-cert            der pem crt;
        application/x-xpinstall               xpi;
        application/zip                       zip;
        application/octet-stream              deb;
        application/octet-stream              bin exe dll;
        application/octet-stream              dmg;
        application/octet-stream              eot;
        application/octet-stream              iso img;
        application/octet-stream              msi msp msm;
        audio/mpeg                            mp3;
        audio/x-realaudio                     ra;
        video/mpeg                            mpeg mpg;
        video/quicktime                       mov;
        video/x-flv                           flv;
        video/x-msvideo                       avi;
        video/x-ms-wmv                        wmv;
        video/x-ms-asf                        asx asf;
        video/x-mng                           mng;
    }

    # 反向代理配置
    proxy_redirect          off;
    proxy_set_header        Host              $host;
    proxy_set_header        X-Real-IP         $remote_addr;
    proxy_set_header        X-Forwarded-Proto $scheme;
    proxy_set_header        X-Forwarded-For   $proxy_add_x_forwarded_for;
    # Cloudflare 的客户端真实IP，不套 CF WAF 用不到
    proxy_set_header        CF-Connecting-IP  $http_CF_Connecting_IP;
    proxy_set_header        Upgrade           $http_upgrade;
    proxy_set_header        Connection        "upgrade";
    proxy_read_timeout      6000;
    proxy_connect_timeout   600;
    proxy_send_timeout      90;
    proxy_buffers           32 4k;
    # 最大请求体，上传大文件需要修改这里
    client_max_body_size    100m;
    client_body_buffer_size 128k;

    # CGI 配置
    fastcgi_param  SCRIPT_FILENAME    $document_root$fastcgi_script_name;
    fastcgi_param  QUERY_STRING       $query_string;
    fastcgi_param  REQUEST_METHOD     $request_method;
    fastcgi_param  CONTENT_TYPE       $content_type;
    fastcgi_param  CONTENT_LENGTH     $content_length;
    fastcgi_param  SCRIPT_NAME        $fastcgi_script_name;
    fastcgi_param  REQUEST_URI        $request_uri;
    fastcgi_param  DOCUMENT_URI       $document_uri;
    fastcgi_param  DOCUMENT_ROOT      $document_root;
    fastcgi_param  SERVER_PROTOCOL    $server_protocol;
    fastcgi_param  GATEWAY_INTERFACE  CGI/1.1;
    fastcgi_param  SERVER_SOFTWARE    nginx/$nginx_version;
    fastcgi_param  REMOTE_ADDR        $remote_addr;
    fastcgi_param  REMOTE_PORT        $remote_port;
    fastcgi_param  SERVER_ADDR        $server_addr;
    fastcgi_param  SERVER_PORT        $server_port;
    fastcgi_param  SERVER_NAME        $server_name;
    fastcgi_index  index.php;
    fastcgi_param  REDIRECT_STATUS    200;

    # 默认首页
    index index.html index.htm index.php;

    # 默认响应类型
    default_type        application/octet-stream;
    # 日志格式
    log_format          main '$remote_addr - $remote_user [$time_local] $status "$request" $body_bytes_sent "$http_referer" "$http_user_agent" "$http_x_forwarded_for"';
    # 访问日志
    access_log          logs/access.log    main;
    sendfile            on;
    tcp_nopush          on;
    tcp_nodelay         on;
    keepalive_timeout   30;
    types_hash_max_size 4096;
    # this seems to be required for some vhosts
    server_names_hash_bucket_size 128;

    # php/fastcgi PHP 项目的CGI配置
    server {
        listen      80;
        listen      [::]:80;
        server_name renfei.net www.renfei.net
        access_log  logs/renfei.net.access.log    main;
        root        html;

        location ~ \.php$ {
            fastcgi_pass     127.0.0.1:1025;
        }
    }

    # 动静分离
    server {
        listen      80;
        listen      [::]:80;
        server_name renfei.net www.renfei.net;
        access_log  logs/renfei.net.access.log    main;

        # 静态文件 nginx 响应即可
        location ~ ^/(images|javascript|js|css|flash|media|static)/    {
            root        /var/www/virtual/big.server.com/htdocs;
            expires 30d;
        }

        # 动态请求反代给后端
        location / {
            proxy_pass http://127.0.0.1:8080;
        }
    }

    server {
        listen      80;
        listen      [::]:80;
        server_name renfei.net www.renfei.net;
        access_log  logs/renfei.net.access.log main;

        location / {
            # 301 永久重定向
            rewrite ^ https://www.renfei.net permanent;
        }

        location /admin {
            # 禁止访问 admin，444 就是不响应任何内容，403 404 也可以
            return 444;
        }
    }

    # 负载均衡配置
    upstream big_server_com {
        server 127.0.0.3:8000 weight=5;
        server 127.0.0.3:8001 weight=5;
        server 192.168.0.1:8000;
        server 192.168.0.1:8001;
    }

    # 负载均衡配置
    server {
        listen      80;
        listen      [::]:80;
        server_name renfei.net www.renfei.net;
        access_log  logs/renfei.net.access.log main;

        location / {
            proxy_pass            http://big_server_com;
        }
    }

    # CORS 允许跨域请求，慎用，不符合安全规定
    server {
        listen      80;
        listen      [::]:80;
        server_name renfei.net www.renfei.net;
        access_log  logs/renfei.net.access.log    main;

        # CORS 允许跨域请求，慎用，不符合安全规定
        add_header Access-Control-Allow-Origin * always;
        add_header Access-Control-Allow-Methods 'GET, POST, PUT, DELETE, OPTIONS';
        add_header Access-Control-Allow-Headers 'DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization';

        if ($request_method = 'OPTIONS') {
            return 204;
        }

        location / {
            proxy_pass http://127.0.0.1:8080;
        }
    }

    # HTTPS 并开启 HTTP/2 与会话恢复支持
    server {
        listen       443 ssl http2;
        listen       [::]:443 ssl http2;
        server_name  renfei.net www.renfei.net;

        # 证书与秘钥
        ssl_certificate           "/etc/pki/nginx/server.crt";
        ssl_certificate_key       "/etc/pki/nginx/private/server.key";
        # 会话恢复
        ssl_session_cache         shared:MozSSL:10m;
        ssl_session_timeout       1d;
        # 加密协议与套件
        # SSL 已经是不安全的了，绝不要使用。TLSv1.0 与 TLSv1.1 虽然没有被证明不安全，但作为老旧的协议即将过时，除非你的客户真的需要，也不要开启。
        ssl_protocols             TLSv1.2 TLSv1.3;
        # 加密套件，RC4、DES 等等都不安全，下面已经整理了一份支持绝大多数客户端且安全的配置
        ssl_ciphers               ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305;
        ssl_prefer_server_ciphers on;

        # HSTS (HTTP Strict Transport Security)
        # HSTS能够告诉浏览器，该网站只应该通过 HTTPS 访问，避免使用 HTTP。开启方式如下，只需要添加一个 HTTP 头
        # 但是注意！一旦开启 HSTS，浏览器后续将只发起 HTTPS，将拒绝再使用 HTTP！
        # max-age=<expire-time>：指明 HSTS 的有效期，最佳实践是一年时间即 31536000。注意，开启后如果关闭 HTTPS 将在有效期内导致网站无法访问。
        # includeSubDomains：是一个可选参数，指明是否同时适用于子域名。
        # preload：可选参数，指明是否为预加载
        add_header Strict-Transport-Security 'max-age=31536000; includeSubDomains; preload' always;

        location / {
            proxy_pass http://127.0.0.1:8080;
        }
    }
}